{"version":3,"sources":["logo.svg","components/Character.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Character","react_default","a","createElement","onClick","this","props","handleOnClick","className","alt","src","concat","character","name","Component","images","GameContainer","state","map","char","Object","defineProperty","event","_this","target","setState","handleLoss","handleGoodClick","render","_this2","j","x","i","length","Math","floor","random","shuffle","components_Character","App","message","score","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kMCmBzBC,mLAdX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,QAASC,KAAKC,MAAMC,cAAeC,UAAU,aAChDP,EAAAC,EAAAC,cAAA,OACEM,IAAI,2BACJC,IAAG,YAAAC,OAAcN,KAAKC,MAAMM,UAAzB,QACHC,KAAMR,KAAKC,MAAMM,qBATLE,aCAlBC,EAAS,CACb,UACA,UACA,OACA,YACA,QACA,aACA,SACA,cACA,WACA,aACA,WACA,aA+CaC,6MAhCbC,MAAQF,EAAOG,IAAI,SAAAC,GACjB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAED,GAAM,OAGjBZ,cAAgB,SAAAe,GACXC,EAAKN,MAAMK,EAAME,OAAOX,OACzBE,EAAOG,IAAI,SAAAC,GACTI,EAAKE,SAALL,OAAAC,EAAA,EAAAD,CAAA,GAAgBD,GAAM,MAExBI,EAAKjB,MAAMoB,eAEXH,EAAKE,SAALL,OAAAC,EAAA,EAAAD,CAAA,GACGE,EAAME,OAAOX,MAAM,IAEtBU,EAAKjB,MAAMqB,kBACXJ,EAAKK,mFAIA,IAAAC,EAAAxB,KACP,OACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAnCvB,SAAiBN,GACf,IAAI4B,EAAGC,EAAGC,EACV,IAAKA,EAAI9B,EAAE+B,OAAS,EAAGD,EAAI,EAAGA,IAC1BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAI7B,EAAE8B,GACN9B,EAAE8B,GAAK9B,EAAE4B,GACT5B,EAAE4B,GAAKC,EAEX,OAAO7B,EA4BEmC,CAAQtB,GAAQG,IAAI,SAAAC,GAAI,OACvBlB,EAAAC,EAAAC,cAACmC,EAAD,CAAW/B,cAAiBsB,EAAKtB,cAAeK,UAAWO,eA1B3CL,aCkBbyB,6MAtCbtB,MAAQ,CACNuB,QAAS,YACTC,MAAO,KAGTf,WAAa,WACXH,EAAKE,SAAS,CACZe,QAAQ,mBACRC,MAAM,IAERlB,EAAKK,YAGPD,gBAAkB,WAChBJ,EAAKE,SAAS,CACZgB,MAAMlB,EAAKN,MAAMwB,MAAQ,EACzBD,QAAS,yFAMX,OACEvC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cAChBP,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,WAAME,KAAKY,MAAMuB,SACjBvC,EAAAC,EAAAC,cAAA,WAAME,KAAKY,MAAMwB,QAEnBxC,EAAAC,EAAAC,cAACuC,EAAD,CACEf,gBAAiBtB,KAAKsB,gBACtBD,WAAYrB,KAAKqB,qBAhCTZ,aCME6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpB,OAAO3B,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d03e287f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass Character extends Component {\n  \n  render() {\n    return (\n      <div>\n        <div onClick={this.props.handleOnClick} className=\"character\">\n          <img\n            alt=\"https://placehold.it/200\"\n            src={`./images/${this.props.character}.png`}\n            name={this.props.character}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Character;\n","import React, { Component } from \"react\";\nimport Character from \"./Character\";\nconst images = [\n  \"butters\",\n  \"cartman\",\n  \"chef\",\n  \"commander\",\n  \"kenny\",\n  \"lemmiwinks\",\n  \"mackey\",\n  \"mrsclaridge\",\n  \"mrstotch\",\n  \"randymarsh\",\n  \"terrance\",\n  \"tweak\"\n];\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n  }\n  return a;\n}\n\nclass GameContainer extends Component {\n\n  state = images.map(char=>{\n    return {[char]:false}\n  })\n\n  handleOnClick = event=>{\n    if(this.state[event.target.name]){\n      images.map(char=>{\n        this.setState({[char]:false})\n      });\n      this.props.handleLoss();\n    }else{\n      this.setState({\n        [event.target.name]:true\n      })\n      this.props.handleGoodClick()\n      this.render()\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          {shuffle(images).map(char => (\n            <Character handleOnClick = {this.handleOnClick} character={char} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameContainer;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport GameContainer from \"./components/GameContainer\";\n\nclass App extends Component {\n  state = {\n    message: \"LET'S GO!\",\n    score: 0\n  };\n\n  handleLoss = () => {\n    this.setState({\n      message:\"YOU LOSE, LOSER!\",\n      score:0\n    })\n    this.render();\n  };\n\n  handleGoodClick = () => {\n    this.setState({\n      score:this.state.score + 1,\n      message: \"Good Guess!\"\n\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span>Clicky Game!</span>\n          <div>{this.state.message}</div>\n          <div>{this.state.score}</div>\n        </header>\n        <GameContainer\n          handleGoodClick={this.handleGoodClick}\n          handleLoss={this.handleLoss}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}